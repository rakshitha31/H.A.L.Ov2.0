# -*- coding: utf-8 -*-
"""
Created on Sat May  4 11:12:15 2019

@author: K.S.LOHITH
"""


import cv2
import imutils
import numpy as np
from scipy import signal
from scipy.fftpack import fft
import numpy as np
from scipy.fftpack import fftfreq
import matplotlib.pyplot as plt

# Load the Haar cascades
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
eyes_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')
blue = []
red = []
green = []
hue = []
saturation = []
value = []
redmean = 0
greenmean = 0
max1=0
max0 = 0
bluemean = 0
huemean = 0
valuemean = 0
saturationmean = 0
# Define function that will do detection
def detect(gray, frame):
  """ Input = greyscale image or frame from video stream
      Output = Image with rectangle box in the face
  """
  # Now get the tuples that detect the faces using above cascade
  faces = face_cascade.detectMultiScale(gray, 1.3, 5)
  # faces are the tuples of 4 numbers
  # x,y => upperleft corner coordinates of face
  # width(w) of rectangle in the face
  # height(h) of rectangle in the face
  # grey means the input image to the detector
  # 1.3 is the kernel size or size of image reduced when applying the detection
  # 5 is the number of neighbors after which we accept that is a face
  
  # Now iterate over the faces and detect eyes
  for (x,y,w,h) in faces:
    #cv2.rectangle(frame, (x,y), (x+w, y+h), (255,0,0), 2)
    # Arguements => image, top-left coordinates, bottomright coordinates, color, rectangle border thickness
    
    # we now need two region of interests(ROI) grey and color for eyes one to detect and another to draw rectangle
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = frame[y:y+h, x:x+w]
    #headfore = frame[y-int(h/5):y-int(h/4), x+int(w/5):x+int(w/4)]
    #cv2.show(headfore)
    # Detect eyes now
    eyes = eyes_cascade.detectMultiScale(roi_gray, 1.1, 3)
    # Now draw rectangle over the eyes
    for (ex, ey, ew, eh) in eyes:
      #cv2.rectangle(roi_color, (ex,ey), (ex+ew, ey+eh), (0, 255, 0), 2)
      hx=ex
      hy=ey-30
      hw=ex+ew
      hh=ey+eh-30
        #cv2.rectangle(roi_color,(ex,ey-30),(ex+ew,ey+eh-30),(0,0,255),2)
    try:
        #cv2.rectangle(roi_color,(hx-15,hy-20),((2*hw)+45,hh-30),(0,0,255),2)
        roi = roi_color[hy-20:hh-30,hx-15:(2*hw)+45]
        cv2.imshow("roi",roi)
        b,g,r = cv2.split(roi)
        bl = np.mean(b)
        re = np.mean(r)
        gr = np.mean(g)
        blue.append(bl)
        red.append(re)
        green.append(gr)
        hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
        h, s, v = hsv[:, :, 0], hsv[:, :, 1], hsv[:, :, 2]
        hu = np.mean(h)
        sa = np.mean(s)
        va = np.mean(v)
        hue.append(hu)
        saturation.append(sa)
        value.append(va)
        # set blue and green channels to 0
        cv2.imshow("blue",b)
        cv2.imshow("red",r)
        cv2.imshow("green",g)
        return roi
    except UnboundLocalError:
        pass
    except:
        pass
  #return frame
def getmean():
    for i in range(len(blue)-1):
        blue[i] = (blue[i+1]-blue[i])
    for i in range(len(green)-1):
        green[i] = (green[i+1]-green[i])    
    for i in range(len(red)-1):
        red[i] = (red[i+1]-red[i])
    for i in range(len(hue)-1):
        hue[i] = abs(hue[i+1]-hue[i])
    for i in range(len(value)-1):
        value[i] = abs(value[i+1]-value[i])
    for i in range(len(saturation)-1):
        saturation[i] = abs(saturation[i+1]-saturation[i])
        
def spacialaverage():
    redmean = sum(red)/len(red)
    print(redmean)
    greenmean = sum(green)/len(green)
    print(greenmean)
    bluemean = sum(blue)/len(blue)
    print(bluemean)
    huemean = sum(hue)/len(hue)
    print(huemean)
    valuemean = sum(value)/len(value)
    print(greenmean)
    saturationmean = sum(saturation)/len(saturation)
    print(bluemean)
    for i in range(len(blue)):
        blue[i] = abs(blue[i]-bluemean)
    for i in range(len(green)):
        green[i] = abs(green[i]-greenmean)   
    for i in range(len(red)-1):
        red[i] = abs(red[i]-redmean)
    for i in range(len(hue)-1):
        hue[i] = abs(hue[i]-huemean)
    for i in range(len(value)-1):
        value[i] = abs(value[i]-valuemean)
    for i in range(len(saturation)-1):
        saturation[i] = abs(saturation[i]-saturationmean)
        
def dofft():
    dred= signal.detrend(red)
    dgreen = signal.detrend(green)
    dblue = signal.detrend(blue)
    dhue = signal.detrend(hue)
    dvalue = signal.detrend(value)
    dsaturation = signal.detrend(saturation)
    

    yd1 = fft(dred)
    yd2 = fft(dgreen)
    yd3 = fft(dblue)
    yd4 = fft(dhue)
    yd5 = fft(dvalue)
    yd6 = fft(dsaturation)
    
    #yd1 = fft(dred)
    #yd2 = fft(dgreen)
    #yd3 = fft(dblue)
    
    N = len(red)
    # sample spacing
    T = 1.0 / 100.0
    x = np.linspace(0.0, N*T, N) 
    
    yg1 = np.abs(yd1[:N//2])
    yg2 = np.abs(yd2[:N//2])
    yg3 = np.abs(yd3[:N//2])
    yg4 = np.abs(yd4[:N//2])
    yg5 = np.abs(yd5[:N//2])
    yg6 = np.abs(yd6[:N//2])
    
    xf = np.linspace(0.0, 1.0/(2.0*T), N/2)
    #xf = xf[2:]
    xint = list(xf)
    #for i in xint:
    #    i = math.ceil(i)
    xf1 = xf*10
    mylist0 = zip(xf1,yg3)
    mydict0 = dict(mylist0)
    xarray0 = mydict0.keys()
    yarray0 = mydict0.values()
    print(xf1)
    print(yg2)
    a0=[]
    for key in xarray0:
        a0.append(key)
    b0 = []
    for values in yarray0:
        b0.append(values)
    max0 = 0
    maxx = 0
    for ij in range(len(b0)):
        if(a0[ij] > 65 and a0[ij] < 120 ):
                if( b0[ij] > max0 and ( b0[ij] < 100 and b0[ij] > 65 ) ):
                    max0 = b0[ij]
                    maxx = a0[ij]
    print(max0)
    print(maxx)
    
    mylist1 = zip(xf1,yg4)
    mydict1 = dict(mylist1)
    xarray1 = mydict1.keys()
    yarray1 = mydict1.values()
    a1=[]
    for key in xarray1:
        a1.append(key)
    b1 = []
    for values in yarray1:
        b1.append(values)
    max1 = 0
    maxx1 = 0
    for ij in range(len(b1)):
        if(a1[ij] > 65 and a1[ij] < 120 ):
                if( b1[ij] > max1 and ( b1[ij] < 100 and b1[ij] > 65 ) ):
                    max1 = b1[ij]
                    maxx1 = a1[ij]
    print(max1)
    print(maxx1)
    
    
   
    plt.figure(1)
    plt.plot(xf*10, yg3 , color="blue")
    plt.figure(2)
    plt.plot(xf*10, yg1 , color="red")
    plt.figure(3)
    plt.plot(xf*10, yg2, color="green")
    plt.figure(4)
    plt.plot(xf*10, yg4, color="cyan")
    plt.figure(5)
    plt.plot(xf*10, yg5, color="orange")
    plt.figure(6)
    plt.plot(xf*10, yg6, color="black")
    #ax.plot(a0, b0 , color="green")
    #ax.plot(xf*10, yg1)
    plt.show()
# Capture video from webcam 
video_capture = cv2.VideoCapture("rashiiii.mp4")
#video_capture.set(cv2.CV_CAP_PROP_FPS,60)
# Run the infinite loop
ret = True

while ret:
  try:
  # Read each frame
      ret, frame = video_capture.read()
      #print(frame.shape)
    #  if frame.empty():
    #      break;
      
      frame = cv2.resize(frame,(int(frame.shape[1]/2),int(frame.shape[0]/2)))
      frame = imutils.rotate_bound(frame,90)
      # Convert frame to grey because cascading only works with greyscale image
      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
      # Call the detect function with grey image and colored frame
      canvas = detect(gray, frame)
      # Show the image in the screen
      #cv2.imshow("Video", canvas)
     # cv2.waitKey(1)
    #  if ret == False:
    #      break
     # Put the condition which triggers the end of program
    
    
      if cv2.waitKey(1) and 0xFF == ord('q'):
        break
  except AttributeError:
      break      
video_capture.release()
cv2.destroyAllWindows()
getmean()


#spacialaverage()

dofft()
avg = ( max0 + max1 )/2

import math
from firebase import firebase

firebase=firebase.FirebaseApplication('https://halo2-1ce47.firebaseio.com/')

result = firebase.put('/Patients/Lohith','heartRate',math.ceil(avg))






                                    

